using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using EnumsNET;
using SJP.Schematic.Core;
using SJP.Schematic.Core.Extensions;
using SJP.Schematic.Core.Utilities;

namespace SJP.Schematic.Oracle
{
    /// <summary>
    /// A Oracle index definition.
    /// </summary>
    /// <seealso cref="IDatabaseIndex" />
    [DebuggerDisplay("{" + nameof(DebuggerDisplay) + ",nq}")]
    public class OracleDatabaseIndex : IOracleDatabaseIndex
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OracleDatabaseIndex"/> class.
        /// </summary>
        /// <param name="name">An index name.</param>
        /// <param name="isUnique">Determines whether the index is unique, if <see langword="true"/>, the index is unique.</param>
        /// <param name="columns">The columns.</param>
        /// <param name="properties">A set of flags determining properties of the given index.</param>
        /// <exception cref="ArgumentNullException"><paramref name="name"/> is <c>null</c>. Alternatively if <paramref name="columns"/> is <c>null</c>, empty or has a <c>null</c> value.</exception>
        /// <exception cref="ArgumentException"><paramref name="properties"/> is an invalid enum value.</exception>
        public OracleDatabaseIndex(Identifier name, bool isUnique, IReadOnlyCollection<IDatabaseIndexColumn> columns, OracleIndexProperties properties)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));
            if (columns == null || columns.Empty() || columns.AnyNull())
                throw new ArgumentNullException(nameof(columns));
            if (!properties.IsValid())
                throw new ArgumentException($"The { nameof(OracleIndexProperties) } provided must be a valid enum.", nameof(properties));

            Name = name.LocalName;
            IsUnique = isUnique;
            Columns = columns;

            GeneratedByConstraint = (properties & ConstraintGeneratedProps) == ConstraintGeneratedProps;
        }

        /// <summary>
        /// The index name.
        /// </summary>
        /// <value>The name of the index.</value>
        public Identifier Name { get; }

        /// <summary>
        /// Indicates whether covered index columns must be unique across the index column set.
        /// </summary>
        /// <value><c>true</c> if the index column set must have unique values; otherwise, <c>false</c>.</value>
        public bool IsUnique { get; }

        /// <summary>
        /// The index columns that form the primary basis of the index.
        /// </summary>
        /// <value>A collection of index columns.</value>
        public IReadOnlyCollection<IDatabaseIndexColumn> Columns { get; }

        /// <summary>
        /// The included or leaf columns that are also available once the key columns have been searched. Always empty.
        /// </summary>
        /// <value>An empty collection of columns.</value>
        public IReadOnlyCollection<IDatabaseColumn> IncludedColumns { get; } = Array.Empty<IDatabaseColumn>();

        /// <summary>
        /// Indicates whether this instance is enabled.
        /// </summary>
        /// <value>Always <c>true</c>.</value>
        public bool IsEnabled { get; } = true;

        /// <summary>
        /// Determines whether the index was automatically generated by a constraint.
        /// </summary>
        /// <value><c>true</c> if the index was generated by a constraint; otherwise, <c>false</c>.</value>
        public bool GeneratedByConstraint { get; }

        private const OracleIndexProperties ConstraintGeneratedProps = OracleIndexProperties.Unique | OracleIndexProperties.CreatedByConstraint;

        /// <summary>
        /// Returns a string that provides a basic string representation of this object.
        /// </summary>
        /// <returns>A <see cref="string"/> that represents this instance.</returns>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override string ToString() => DebuggerDisplay;

        private string DebuggerDisplay
        {
            get
            {
                var builder = StringBuilderCache.Acquire();

                builder.Append("Index: ");

                if (!Name.Schema.IsNullOrWhiteSpace())
                    builder.Append(Name.Schema).Append('.');

                builder.Append(Name.LocalName);

                return builder.GetStringAndRelease();
            }
        }
    }
}
